name: webscanner

services:

  # MySQL Database
  mysql-auth:
    image: mysql:latest
    container_name: ${MYSQL_AUTH_SERVICE_NAME}
    restart: always

    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_AUTH_ROOT_PASSWORD} # Root password, Default User: root
      - MYSQL_USER=${MYSQL_AUTH_USER} # Application user
      - MYSQL_PASSWORD=${MYSQL_AUTH_PASSWORD} # Application password
      - MYSQL_DATABASE=${MYSQL_AUTH_DATABASE} # Application database

    ports:
      - "${MYSQL_AUTH_PORT}:3306" # MySQL port

    volumes:
      - ./database/auth/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize MySQL with schema
      - mysql_auth_data:/var/lib/mysql # Persist MySQL data

    networks:
      - mysql-auth

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"] # Check if MySQL is up
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI Authentication Service
  fastapi-auth:
    build: ./authentication-service
    container_name: ${AUTH_SERVICE_NAME}
    restart: always

    ports:
      - "8000:8000" # FastAPI port

    depends_on:

      mysql-auth:
        condition: service_healthy # Wait for MySQL to be healthy

      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy

    env_file:
      - .env  # Load environment variables from .env file

    networks:
      - mysql-auth
      - application
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"] # Check if FastAPI is up
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Message Broker - RabbitMQ
  rabbitmq:
    build: ./message-queue
    container_name: ${RABBITMQ_SERVICE_NAME}
    restart: always

    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER} # RabbitMQ user
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS} # RabbitMQ password

    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"  # AMQP - RabbitMQ Messaging Protocol port
      - "${RABBITMQ_MANAGEMENT_PORT}:15672" # RabbitMQ Management Console port - http://localhost:15672

    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persist RabbitMQ data
      - rabbitmq_config:/etc/rabbitmq    # Persist RabbitMQ configuration

    networks:
      - application

    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"] # Check if RabbitMQ is up
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

#------------------------------------------------------------------------------------------------------------------
# Scraping services
#------------------------------------------------------------------------------------------------------------------

  # Scraping DB's 
  mysql-test-scraper:
    image: mysql:latest
    container_name: ${MYSQL_TEST_SCRAPER_SERVICE_NAME}
    restart: always

    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_TEST_SCRAPER_ROOT_PASSWORD} # Root password, Default User: root
      - MYSQL_USER=${MYSQL_TEST_SCRAPER_USER} 
      - MYSQL_PASSWORD=${MYSQL_TEST_SCRAPER_PASSWORD} 
      - MYSQL_DATABASE=${MYSQL_TEST_SCRAPER_DATABASE} 

    ports:
      - "${MYSQL_TEST_SCRAPER_PORT}:3306"

    volumes:
      - ./database/Scrapers/TestScraper/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_test_scraper_data:/var/lib/mysql

    networks:
      - mysql-scraping

    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  # Basic volumes
  mysql_auth_data: # MySQL data volume for authentication service
  rabbitmq_data: # RabbitMQ data volume
  rabbitmq_config: # RabbitMQ configuration volume

  # Custom volumes for scraping service
  mysql_test_scraper_data: # MySQL data volume for scraping service


networks:
  application:
    driver: bridge
  mysql-auth:
    internal: true
  mysql-scraping:
    internal: true
